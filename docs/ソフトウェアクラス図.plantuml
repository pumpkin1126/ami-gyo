@startuml Amigyo-class

namespace Amigyo {

    namespace Input {
        interface IInputProvider {
            Angle: ReactiveProperty<float>
            IsPressed: ReactiveProperty<bool>
            Listen(): bool
            Dispose(): void
        }
        note left
        AngleはX軸から反時計回りを
        正の向きとするdegreeで返す。
        end note

        IInputProvider <|.. 入力実装
        IInputProvider <|.. スタブ
    }

    namespace Spawners{
        class SpawnerHolder{
            - spawner : Spawner
            + changeSpawner(EventType)
        }

        abstract class Spawner{

        }

        SpawnerHolder -> Spawner
    }

    namespace Fishs{
        class FishInfo{
            + Weight : int
            + BonusTime : int
            + EventName : EventType
        }

        abstract class Fish{
            + Info : FishInfo
        }
    }

    class GameManager{
        + RemainingTime : int
        + Score : int
        + CalculateScore(FishInfo) : void
    }

    enum EventType{
        None
        MassGeneration
        StrongFish
    }

    namespace UI{

        class Timer{

        }
        note bottom : 残り時間の表示

        class Score{

        }
        note bottom : スコア表示
    }

    namespace Ship{
        class Shooter{

        }
        class Net

        Shooter --> Net : 発射
    }

    GameManager --> Amigyo.UI.Timer : 時間を受け取る
    GameManager --> Amigyo.UI.Score : スコアを受け取る
    GameManager --> Amigyo.Spawners.SpawnerHolder : 生成パターン変更
    Amigyo.Ship.Net --> GameManager : 捕獲した魚のデータ
    Amigyo.Input.IInputProvider --> Amigyo.Ship.Shooter : 入力データ
    Amigyo.Spawners.Spawner --> Amigyo.Fishs.Fish : 生成
    Amigyo.Fishs.Fish - Amigyo.Fishs.FishInfo
}
@enduml